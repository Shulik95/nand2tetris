// writing function: Main.fibonacci
(FibonacciElement.Main.fibonacci)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@JUMP0
M=-1
D;JLT
@NJUMP0
M=0
0;JMP
(JUMP0)
(NJUMP0)
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing if-goto: IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@FibonacciElement.Main.fibonacci$IF_TRUE
D;JNE
// writing goto: IF_FALSE
@FibonacciElement.Main.fibonacci$IF_FALSE
0;JMP
// writing label: IF_TRUE
(FibonacciElement.Main.fibonacci$IF_TRUE)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing return: return
@LCL
D=M
@ENDFRAME0
M=D
@5
D=D-A
@R15
M=D
A=D
D=M
@RETURN0
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@RETURN0
A=M
0;JMP
// writing label: IF_FALSE
(IF_FALSE)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
// writing arithmetic: add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
// writing return: return
@LCL
D=M
@ENDFRAME1
M=D
@5
D=D-A
@R15
M=D
A=D
D=M
@RETURN1
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R15
M=M+1
A=M
D=M
@LCL
M=D
@R15
M=M+1
A=M
D=M
@ARG
M=D
@R15
M=M+1
A=M
D=M
@THIS
M=D
@R15
M=M+1
A=M
D=M
@THAT
M=D
@RETURN1
A=M
0;JMP
// writing function: Sys.init
(FibonacciElement.Sys.init)
// writing:C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing label: WHILE
(FibonacciElement.Sys.init$WHILE)
// writing goto: WHILE
@FibonacciElement.Sys.init$WHILE
0;JMP
