@256
D=A
@SP
M=D
@$RETURN1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($RETURN1)
// writing function: Main.fibonacci
(Main.fibonacci)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@JUMP0
M=-1
D;JLT
@NJUMP0
M=0
0;JMP
(JUMP0)
(NJUMP0)
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing if-goto: IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@IF_TRUE
D;JNE
// writing goto: IF_FALSE
@IF_FALSE
0;JMP
// writing label: IF_TRUE
(IF_TRUE)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing return: return
//# endframe = LCL
@LCL
D=M
@ENDFRAME1
M=D
//#  # retaddr = *(endframe-5)
@5
D=D-A
A=D
D=M
@RETURN1
M=D
//# *ARG = pop()
@0
D=A
@ARG
D=M+D
@R14
M=D
@SP
M=M-1
A=M
D=M
@R14
A=M
M=D
//# sp = arg + 1
@ARG
D=M
@SP
M=D+1
@ENDFRAME1
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@ENDFRAME1
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@ENDFRAME1
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@ENDFRAME1
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RETURN1
A=M
0;JMP
// writing label: IF_FALSE
(IF_FALSE)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//writing call: Main.fibonacci
@Main.fibonacci$RETURN2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$RETURN2)
// writing:C_PUSH argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// writing:C_PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// writing arithmetic: sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1
//writing call: Main.fibonacci
@Main.fibonacci$RETURN3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$RETURN3)
// writing arithmetic: add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1
// writing return: return
//# endframe = LCL
@LCL
D=M
@ENDFRAME3
M=D
//#  # retaddr = *(endframe-5)
@5
D=D-A
A=D
D=M
@RETURN3
M=D
//# *ARG = pop()
@0
D=A
@ARG
D=M+D
@R14
M=D
@SP
M=M-1
A=M
D=M
@R14
A=M
M=D
//# sp = arg + 1
@ARG
D=M
@SP
M=D+1
@ENDFRAME3
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@ENDFRAME3
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@ENDFRAME3
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@ENDFRAME3
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RETURN3
A=M
0;JMP
// writing function: Sys.init
(Sys.init)
// writing:C_PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//writing call: Main.fibonacci
@Main.fibonacci$RETURN4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$RETURN4)
// writing label: WHILE
(WHILE)
// writing goto: WHILE
@WHILE
0;JMP
