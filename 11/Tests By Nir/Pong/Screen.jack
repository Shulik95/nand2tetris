// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int currentColor;

    /** Initializes the Screen. */
    function void init() {
      let currentColor = 0;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int address;
      while (address < 8193) {
        do Memory.poke(16384 + address, 0);
        let address = address + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      if (b) {let currentColor = 1;}
      else {let currentColor = 0;}
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, value, bit, change;
      let address = 32 * y + (x / 16);
      let value = Memory.peek(16384 + address);
      let bit = x - (x / 16 * 16);
      let change = 1;
      while (bit > 0) {
        let change = change + change;
        let bit = bit - 1;
      }
      if (currentColor = 1) {let value = value + change;}
      else {let value = value - change;}
      do Memory.poke(16384 + address, value);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a,b,dx,dy,diff, shift;
      if (x1 = x2) {
        do Screen.drawSimpleLine(Math.min(y1, y2), Math.max(y1, y2), x1, true);
        return;
      }
      if (y1 = y2) {
        do Screen.drawSimpleLine(Math.min(x1,x2), Math.max(x1,x2), y1, false);
        return;
      }
      if (x1 > x2) {  // if it's a left going line just call reversed
        do Screen.drawLine(x2, y2, x1, y1);
        return;
      }
      let dx = x2 - x1;
      let dy =  Math.abs(y2 - y1);
      if (y1 > y2) {let shift = -1;}
      else {let shift = 1;}
      while ((a < (dx + 1)) & ((Math.abs(b)) < (dy + 1))) {
        do Screen.drawPixel(x1 + a, y1 + b);
        if (diff < 0) {
          let a = a + 1;
          let diff = diff + dy;
        }
        else {
          let b = b + shift;
          let diff = diff - dx;
        }
      }
      return;
    }

    /** Draws a vertical/horizontal line from pixel using the current color. q2 > q1, xCord marks the direction (xCord true is for vertical) */
    function void drawSimpleLine(int q1, int q2, int fixed, boolean xCord) {
      var int runner;
      let runner = q2;
      if (xCord) {
        while (runner > q1){
          do Screen.drawPixel(fixed, runner);
          let runner = runner - 1;
        }
      }
      else {
        while (runner > q1){
          do Screen.drawPixel(runner, fixed);
          let runner = runner - 1;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      while (y2 > y1) {
        do Screen.drawSimpleLine(x1, x2, y1, false);
        let y1 = y1 + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy;
      let r = Math.min(r, 181);
      let dy = -r;
      while (dy < r) {
        do Screen.drawSimpleLine(x - (Math.sqrt((r * r) - (dy * dy))),
                           x + (Math.sqrt((r * r) - (dy * dy))), y + dy, false);
        let dy = dy + 1;
      }
      return;
    }
}
