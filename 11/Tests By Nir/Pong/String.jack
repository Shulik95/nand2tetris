// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let maxLength = Math.max(1, maxLength);
      let str = Array.new(maxLength);
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do str.dispose();
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      let str[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let str[length - 1] = 0;
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int j, val, d;
      var boolean neg;
      if (str[0] = 45) {
        let j = 1;
        let neg = true;
      }
      while (j < length) {
        if ((str[j] > 47) & (str[j] < 58)) {
          let d = str[j] - 48;
          let val = val * 10 + d;
          let j = j + 1;
        }
        else {
          return val;
        }
      }
      if (neg) {let val = -val;}
      return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int lastDigit, i;
      var char c;
      var Array temp;
      let temp = Array.new(6);
      let length = 0;
      if (val = 0) {
        let str[0] = 48;
        let length = 1;
        return;
      }
      if (val < 0) {
        let str[0] = 45;
        let i = 1;
        let val = - val;
      }
      while (val > 0) {
        let temp[length] = val - (val / 10 * 10) + 48;
        let length = length + 1;
        let val = val / 10;
      }
      while (length > 0) {
        let str[i] = temp[length - 1];
        let i = i + 1;
        let length = length - 1;
      }
      let length = i;
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
