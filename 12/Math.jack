// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int recursive_qy;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      let twoToThe[15] = 16384 + 16384;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x>0){
        return x;
      }
      else{
        return -x;
      }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i;
        let sum = 0;
        let i = 0;
        let shiftedX = x;
        while (i<16){
          if (Math.bit_is_one(y,i)){ // the i'th element of y is 1
            let sum = sum + shiftedX;
          }
          let shiftedX = shiftedX + shiftedX;
          let i = i + 1;
        }
        return sum;
    }

    /**
    if the i'th element of x is 1 - return true
    else - return False
    */
    function boolean bit_is_one (int x, int i){
      return ~((x & twoToThe[i])=0);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var boolean is_neg;
      var int posX, posY, finalVal;
      if (((x < 0) & (y > 0)) | ((x>0) & (y<0))){
        let is_neg = true; //handles neg numbers
      }
      let posX = Math.abs(x);
      let posY = Math.abs(y);
      let finalVal = Math.div_helper(posX, posY);
      if (is_neg){
          return -finalVal;
      }
      else{
        return finalVal;
      }
    }

    /**
    * helper method for the main divide method
    */
    function int div_helper(int x, int y){
      var int q;
      if ((y > x) | (y < 0) ){ //handles overflow
        let recursive_qy = 0;
        return 0;
      }
      let q = Math.div_helper(x, (y + y));
      if ((x-recursive_qy) < y){
        return q + q;
      }
      else{
        let recursive_qy = recursive_qy + y;
        return (q + q) + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int i,temp,ans,squared;
      let ans=0;
      let i=7; // initial power (n/2)-1=(16/2)-1=7
      while (~(i<0)){ //while i>=0
        let temp = ans + twoToThe[i]; // insted of calculating 2^j, we use the
                                      // deis_negated array twoToThe[i]
        let squared = temp * temp;
        if (~(squared>x) & (squared>0)){
          let ans = temp;
        }
        let i = i-1;
      }
      return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a>b){
        return a;
      }
      return b;
    }


    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a>b){
        return b;
      }
      return a;

    }
}
