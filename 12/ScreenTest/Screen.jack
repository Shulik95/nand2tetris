// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean black, white, color;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
      let black = true;
      let white = false;
      let color = white;
      let screen = 16384;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i = 0;
      while (i < 8192){
        let screen[i] = white;
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      if (b){
        let color = black;
      }
      else{
        let color = white;
      }
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int address, offset;
      let address = Screen.multBy32(y) + Math.divide(x, 16);
      let offset = Math.getPowerOf(x & 15); // x % 2^i == x &( 2^i - 1)
      if(color){ //need to change pixel to black
        let screen[address] = screen[address]|offset; //colors the given pixel
      }
      else{
        let screen[address] = screen[address] & ~offset; //doesnt color given pixel
      }
      return;
    }
    function void drawLine(int x1, int y1, int x2, int y2) {
    if((x1 < 0) | (x1 > 511)) {
      do Sys.error(8);
    }
    if((x2 < 0) | (x2 > 511)) {
      do Sys.error(8);
    }
    if((y1 < 0) | (y1 > 255)) {
      do Sys.error(8);
    }
    if((y2 < 0) | (y2 > 255)) {
      do Sys.error(8);
    }

    if(x1 = x2) {
      do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
      return;
    }
    if(y1 = y2) {
      do Screen.drawHorizontalLine(y1, Math.min(x1, x2), Math.max(x1, x2));
      return;
    }
    if((x1 < x2) & (y1 < y2)) {
      do Screen.drawPosSlopedLine(x1, y1, x2 - x1, y2 - y1);
      return;
    }
    if((x2 < x1) & (y2 < y1)) {
      do Screen.drawPosSlopedLine(x2, y2, x1 - x2, y1 - y2);
      return;
    }
    if((x1 < x2) & (y1 > y2)) {
      do Screen.drawNegSlopedLine(x1, y1, x2 - x1, y2 - y1);
      return;
    }
    if((x2 < x1) & (y1 < y2)) {
      do Screen.drawNegSlopedLine(x2, y2, x1 - x2, y1 - y2);
      return;
    }

    return;
  }

  function void drawPosSlopedLine(int x, int y, int dx, int dy) {
    var int a, b, d;

    let a = 0;
    let b = 0;
    let d = 0;
    do Screen.drawPixel(x, y);
    while((a < dx) & (b < dy)) {
      if(d > 0) {
        let a = a + 1;
        let d = d - dy;
      }
      else {
        let b = b + 1;
        let d = d + dx;
      }
      do Screen.drawPixel(x + a, y + b);
    }
    return;
  }

  function void drawNegSlopedLine(int x, int y, int dx, int dy) {
    var int a, b, d;

    let a = 0;
    let b = 0;
    let d = 0;
    do Screen.drawPixel(x, y);
    while((a < dx) & (b > dy)) {
      if(d > 0) {
        let b = b - 1;
        let d = d - dx;
      }
      else {
        let a = a + 1;
        let d = d - dy;
      }
      do Screen.drawPixel(x + a, y + b);
    }
    return;
  }

  function void drawVerticalLine(int x, int y1, int y2) {
    do Screen.drawPixel(x, y1);
    while(y1 < y2) {
      let y1 = y1 + 1;
      do Screen.drawPixel(x, y1);
    }
    return;
  }

  function void drawHorizontalLine(int y, int x1, int x2) {
    do Screen.drawPixel(x1, y);
    while(x1 < x2) {
      let x1 = x1 + 1;
      do Screen.drawPixel(x1, y);
    }
    return;
  }

    // /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    // function void drawLine(int x1, int y1, int x2, int y2) {
    //   var int dx, dy;
    //   let dx = Math.abs(x2-x1);
    //   let dy = Math.abs(y2 -y1);
    //
    //   if (x1 = x2){
    //     do Screen.drawVertical(x1, y1, x2, y2);
    //     return;
    //   }
    //   if(y1 = y2){
    //     do Screen.drawHorizontal(x1, y1, x2, y2);
    //     return;
    //   }
    //   if((x1 < x2)&( y1 < y2)){
    //     do Screen.line_helper1(x1, y1, dx, dy);
    //     return;
    //   }
    //   if((x1 > x2) & (y1 < y2)){
    //     do Screen.line_helper2(x2,y2,-dx, -dy);
    //     return;
    //   }
    //   if((x1<x2) & (y1 > y2)){
    //     do Screen.line_helper2(x1,y1,dx,dy);
    //     return;
    //   }
    //   if((x1>x2) & (y1>y2)){
    //     do Screen.line_helper1(x2,y2, -dx, -dy);
    //     return;
    //   }
    //   return;
    // }
    // /**deals with ascending lines according to the given axis*/
    // function void line_helper1(int x, int y, int dx, int dy){
    //   var int rightMoves, upMoves, diff;
    //   let rightMoves = 0;
    //   let upMoves = 0;
    //   let diff = rightMoves * dy - upMoves * dx //starts off as 0
    //   while(~(rightMoves > dx) & (~(upMoves > dy)){
    //     do Screen.drawPixel(x+rightMoves, y+upMoves);
    //     if(diff > 0){
    //       let rightMoves = rightMoves + 1;
    //       let diff = diff - dy;
    //     }
    //     else{
    //       let upMoves = upMoves + 1;
    //       let diff = diff + dx;
    //     }
    //   }
    //   return;
    // }
    // /**deals with descending lines in the given axis*/
    // function void line_helper2(int x, int y, int dx, int dy){
    //   var int rightMoves, upMoves, diff;
    //   let rightMoves = 0;
    //   let upMoves = 0;
    //   let diff = rightMoves * dy - upMoves * dx //starts of as 0
    //   while(~(rightMoves > dx) & ~(upMoves < dy)){
    //     do Screen.drawPixel(x+rightMoves, y+upMoves);
    //     if(diff > 0){
    //       let upMoves = upMoves - 1;
    //       let diff = diff - dx;
    //     }
    //     else{
    //       let rightMoves = rightMoves + 1;
    //       let diff = diff - dy;
    //     }
    //   }
    //   return;
    // }
    //
    // /**draws a diagonal line*/
    // function void drawVertical(int x, int y, int dy){
    //   var int length;
    //   let length = 0;
    //   while(~(length > dy)){
    //     do Screen.drawPixel(x, y + length);
    //     let length = length + 1;
    //   }
    //   return;
    // }
    //
    // function void drawHorizontal(int x, int y, int dx){
    //   var int length;
    //   let length = 0;
    //   while(~(length > dx)){
    //     do Screen.drawPixel(x + length, y);
    //     let length = length + 1;
    //   }
    //   return;
    // }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int start;
      let start = x1;
      if(x2 > x1){
        while(~(start>x2)){
          do Screen.drawLine(start, y1, start, y2);
          let start = start + 1;
        }
      }
      else{
        while(~(start < x2)){
          do Screen.drawLine(start, y1, start, y2);
          let start = start - 1;
        }
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, length;
      let dy=-r;
      if(r>181){
        return;
      }
      while (~(dy>r)){
        let length = Math.sqrt(r*r-dy*dy);
        do Screen.drawLine(x-length,y+dy,x+length,y+dy);
        let dy = dy+1;
      }
      return;
    }
    /**helper method which only multiplies 6 times - the amount of bits that represent 32*/
    function int multBy32(int x){
      var int j;
      let j = 0;
      while (~(j=5)){
        let x = x+x;
        let j = j+1;
      }
      return x;
    }
}
