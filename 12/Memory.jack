// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
 class Memory {

     static Array ram;
     static Array heap;
     static int freeList;


     /** Initializes the class. */
     function void init() {
         let ram = 0;
         let heap = 2048;
         let freeList = heap;
         let heap[0] = heap; // points to
         let heap[1] = 14334; // size
         return;
     }

     /** Returns the RAM value at the given address. */
     function int peek(int address) {
         return ram[address];
     }

     /** Sets the RAM value at the given address to the given value. */
     function void poke(int address, int value) {
         let ram[address] = value;
         return;
     }

     /** Finds an available RAM block of the given size and returns
      *  a reference to its base address. */
     function int alloc(int size) {
         var Array pos_in_heap;
         let pos_in_heap = heap;

         while ( pos_in_heap[1] < size ) { //current position is a fit
             let pos_in_heap = pos_in_heap[0];
         }
         let pos_in_heap[1] = pos_in_heap[1] - size; //change the curr size accordingly
         let pos_in_heap[pos_in_heap[1]] = size;

         return pos_in_heap + pos_in_heap[1];
     }

     /** De-allocates the given object (cast as an array) by making
      *  it available for future allocations. */
     function void deAlloc(Array o) {

         let o[0] = heap;
         let heap[0] = o;
         return;
     }
 }
