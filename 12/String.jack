// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length,maxLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let maxLength = maxLength;
      let str = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Memory.deAlloc(str);
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
      }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j]=c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length<maxLength){ //the current length is no greated than the provided
                            //max length - we can add more chars to the strings.
        let str[length]=c;
        let length = length +1;
      }
      return this;

    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length-1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue(){
      var boolean is_neg;
      var int i,val,d;
      let val = 0;
      // first we find out if its a positive of negative number.
      // we also Initialize the counter accordingly
      if ((str[0]=45)&(length>0)){
        let is_neg=true;
        let i=1;
      }
      else{
        let is_neg = false;
        let i =0;
      }
      while(~(i>length){
        if((str[i]>47)&(str[i]<58)){ //0<=str[i]<=9
          let d = str[i]-48;
          let val = val*10+d;
          let i = i+1;
        }
      }
      if(is_neg){
        return -val;
      }
      return val;
    }



    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len=0;
        if (~(val<0)){// val>=0
          do setInt_helper(val);
        }
        else{ // val<0
          let val=-val;
          do String.appendChar(45); // "-"
        }
        return;
    }
    method void setInt_helper(int val){
      var int modulo;
      let modulo = val-((val/10)*10);
      if (val<10){
        do String.appendChar(modulo+48);
      }
      else{
        do String.setInt_helper((val/10));
        do String.appendChar(mod+48);
      }
      return;
    }


    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
