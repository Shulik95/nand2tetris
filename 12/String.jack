// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length,maximum_lengh;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if(maxLength = 0){
        let maxLength = 1; //handles length 0 Strings
      }
      let maximum_lengh = maxLength;
      let str = Array.new(maxLength);
      let length = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      do Array.dispose(str);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
      }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let str[j]=c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if (length<maximum_lengh){ //the current length is no greated than the provided
                            //max length - we can add more chars to the strings.
        let str[length]=c;
        let length = length +1;
      }
      return this;

    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let length = length-1;
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue(){
      var boolean is_neg;
      var int i,val,d;
      let val = 0;
      let i = 0;
      // first we find out if its a positive of negative number.
      // we also Initialize the counter accordingly
      if ((str[0]=45)&(length>0)){
        let is_neg=true;
        let i=1;
      }
      else{
        let is_neg = false;
      }
      while(i<length){
        if((str[i]>47)&(str[i]<58)){ //0<=str[i]<=9
          let d = str[i]-48; // get integer value
          let val = val*10+d;
        }
        let i = i+1;
      }
      if(is_neg){
        return -val;
      }
      return val;
    }



    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length = 0; //allows us to overwrite string
      if (val < 0){
        do appendChar(45);
        let val = -val; //treat the val as positiv one.
      }
      do setInt_helper(val);
      return;
    }

    /**implementation of the suggested recursiv psudo code*/
    method void setInt_helper(int val){
      var int lastDig, tempNum;
      var String currChar;
      let lastDig = getMod(val, 10);
      let currChar = lastDig + 48; //transfrom to ascii.
      if (val < 10){ //base case of th recursion, the number is 1 digit long
        do appendChar(currChar);
      }
      else{ //the number has more than one digit.
        let tempNum = val / 10; // shorten the val, send it recursivly
        do setInt_helper(tempNum);
        do appendChar(currChar);
      }
		return;
    }

    /** Helper method for getting modulo of a given number*/
    method int getMod(int x, int y){
      var int r, val;
      let r = Math.divide(x,y);
      let val = x - (r * y);
      return val;
    }
    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
